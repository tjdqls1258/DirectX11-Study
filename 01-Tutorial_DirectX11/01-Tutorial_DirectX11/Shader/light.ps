Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXTCORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;
    float3 reflection;
    float4 specular;

    // 텍스쳐 샘플링
    textureColor = shaderTexture.Sample(SampleType, input.tex);

    //주변광 설정
    color = ambientColor;

     specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // 빛 방향 반전(계산용)
    lightDir = -lightDirection;

    //빛의 양 계산
    lightIntensity = saturate(dot(input.normal, lightDir));
    
    if(lightIntensity > 0.0f)
    {
        //디퓨즈 컬러와 빛의 세기에 따라 최종 색상 결정.
        color += (diffuseColor * lightIntensity);

        //주변 및 확산 색상 포화.
        color = saturate(color);

        //반사 벡터 계산
        reflection = normalize(2 * lightIntensity * input.normal - lightDir);
        
        //반사광의 양 결정.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // 텍스쳐와 곱한 최종 색상
    color = color * textureColor;

    // 최종 색상
    color = saturate(color + specular);

    return color;
}